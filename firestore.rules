
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuth() && (getResource('users', request.auth.uid).role == 'admin' || getResource('users', request.auth.uid).role == 'superadmin');
    }
    
    function isSuperAdmin() {
      return isAuth() && getResource('users', request.auth.uid).role == 'superadmin';
    }

    function isKeyholder() {
      return isAuth() && getResource('users', request.auth.uid).role == 'keyholder';
    }
    
    function isStoreManager() {
        return isAuth() && getResource('users', request.auth.uid).role == 'store_manager';
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function getResource(collection, resourceId) {
      return get(/databases/$(database)/documents/$(collection)/$(resourceId)).data;
    }

    // Publicly readable collections
    match /dormitories/{dormId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /halls/{hallId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /blog/{postId} {
        allow read: if resource.data.isPublished == true; // Anyone can read published posts
        allow create, update, delete: if isAdmin();
        allow read: if isAdmin(); // Admins can read drafts
    }

    // Configuration collections (readable by all, writable only by admins)
    match /site_configuration/{docId} {
        allow read: if true;
        allow write: if isSuperAdmin() || (isAdmin() && getResource('users', request.auth.uid).buildingAssignment == null);
    }

    // User data rules
    match /users/{userId} {
      allow read: if isAuth(); // Logged-in users can read user data (e.g. for names)
      allow create: if true; // Anyone can create a user account (signup)
      allow update: if isOwner(userId) || isAdmin(); // Users can update their own profile, admins can update any
      allow delete: if isSuperAdmin(); // Only superadmins can delete user documents
    }

    // Bookings collection
    match /bookings/{bookingId} {
      // Public users need to check for date overlaps for availability. `list` is more secure than `read`.
      allow list: if true;
      allow create: if true; // Anyone can create a booking request
      allow get: if isAdmin() || isKeyholder() || (isAuth() && request.auth.uid == resource.data.userId); // Admins, keyholders, and the booking owner can read
      allow update: if isAdmin() || isKeyholder(); // Admins and keyholders can update status
      allow delete: if isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow create: if true; // Server-side actions create notifications
      allow read: if isAdmin() || (isAuth() && request.auth.uid == resource.data.recipientId);
      allow update: if isAdmin() || (isAuth() && request.auth.uid == resource.data.recipientId);
      allow delete: if isAdmin();
    }
    
    // Store Management collections
    match /store_items/{itemId} {
        allow read, write: if isStoreManager() || isAdmin();
    }
    
    match /store_transactions/{transactionId} {
        allow read, write: if isStoreManager() || isAdmin();
    }

    match /employees/{employeeId} {
        allow read: if isAuth(); // All authenticated staff can see employee list
        allow write: if isAdmin();
    }
  }
}
