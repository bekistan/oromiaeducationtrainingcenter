rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSuperAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    function isAdmin() {
      return request.auth != null && (isSuperAdmin() || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    function isKeyholder() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'keyholder';
    }
    
    function isCompanyRep() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'company_representative';
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // BLOG: Public can read published posts, admins can write.
    match /blog/{postId} {
      allow read: if resource.data.isPublished == true || isAdmin();
      allow write: if isAdmin();
    }
    
    // DORMITORIES & HALLS: Public read, Admin write.
    match /dormitories/{dormId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /halls/{hallId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // BOOKINGS: Users can create/manage their own. Admins and Keyholders have specific permissions.
    match /bookings/{bookingId} {
      allow create: if request.auth != null;
      allow read: if isAdmin() || isKeyholder() || (request.auth != null && resource.data.userId == request.auth.uid);
      allow update: if isAdmin() || (isKeyholder() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['keyStatus']));
      allow delete: if isAdmin();
    }

    // USERS: Users manage their own profile, Admins manage all.
    match /users/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create, delete: if isSuperAdmin();
    }
    
    // NOTIFICATIONS: Admin-only.
    match /notifications/{notificationId} {
      allow read, write: if isAdmin();
    }

    // SITE CONFIGURATION: Public read, Admin write.
    match /site_configuration/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
