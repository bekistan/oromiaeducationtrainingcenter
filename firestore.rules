
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSuperAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }
    function isGeneralAdmin() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.buildingAssignment == null;
    }
    function isKeyholder() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'keyholder';
    }
    function isCompanyRep() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'company_representative';
    }
    function isSignedIn() {
      return request.auth != null;
    }
    
    // PUBLIC COLLECTIONS
    match /dormitories/{dormId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /halls/{hallId} {
      allow read: if true;
      allow write: if isSuperAdmin() || isGeneralAdmin();
    }
    match /blog/{postId} {
      allow get: if resource.data.isPublished == true || isAdmin();
      allow list: if true; // Public can list, but reads are filtered by query `where("isPublished", "==", true)`
      allow write: if isSuperAdmin() || isGeneralAdmin();
    }
    match /site_configuration/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin() || isGeneralAdmin();
    }
    
    // BOOKINGS
    match /bookings/{bookingId} {
      // LIST (queries)
      allow list: if isAdmin() || isKeyholder(); 

      // GET (single doc)
      allow get: if isAdmin() ||
                    isKeyholder() || // Keyholders can get docs they know the ID of
                    (isSignedIn() && request.auth.uid == resource.data.userId) || // User can get their own booking
                    (isCompanyRep() && request.auth.uid == resource.data.userId && resource.data.companyId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId);

      allow create: if true; // Anyone can create a booking request.
      
      // UPDATE
      allow update: if isAdmin() ||
                       (isKeyholder() && request.resource.data.keys().hasAny(['keyStatus'])) ||
                       (request.resource.data.paymentScreenshotUrl != resource.data.paymentScreenshotUrl) ||
                       (request.resource.data.signedAgreementUrl != resource.data.signedAgreementUrl);

      // DELETE
      allow delete: if isAdmin();
    }
    
    // USERS
    match /users/{userId} {
      allow list: if isAdmin();
      allow get: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth.uid == userId; // A user can create their own document on signup.
      allow update: if request.auth.uid == userId || isAdmin();
      allow delete: if isSuperAdmin();
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read, write: if isAdmin(); // Read is get and list.
    }
  }
}
