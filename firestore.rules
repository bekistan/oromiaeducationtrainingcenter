rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    // Checks if a user's role is one of the provided roles.
    // Ensures the user document exists before checking the role.
    function hasRole(allowedRoles) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in allowedRoles;
    }
    
    // Checks if the user is a superadmin or a general admin (not building-specific).
    function isSuperOrGeneralAdmin() {
        let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return request.auth != null &&
               exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               (userDoc.role == 'superadmin' || (userDoc.role == 'admin' && userDoc.buildingAssignment == null));
    }
    
    // Checks if the user is the owner of the document being accessed.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // COLLECTION RULES

    // /users/{userId}
    match /users/{userId} {
      // Admins can read any user, users can read their own profile.
      allow read: if hasRole(['admin', 'superadmin']) || isOwner(userId);
      // Users can update their own profile, admins can update any.
      allow update: if hasRole(['admin', 'superadmin']) || isOwner(userId);
      // Anyone can create a user (for registration), but not an admin/superadmin role.
      // Superadmins can create any user type.
      allow create: if (request.resource.data.role != 'superadmin' && request.resource.data.role != 'admin') || hasRole(['superadmin']);
      // Only superadmins can delete users.
      allow delete: if hasRole(['superadmin']);
    }

    // /blog/{postId}
    match /blog/{postId} {
      // Public can read published posts. Admins can read any post.
      allow read: if resource.data.isPublished == true || hasRole(['admin', 'superadmin']);
      // Only admins can write (create, update, delete).
      allow write: if hasRole(['admin', 'superadmin']);
    }

    // /bookings/{bookingId}
    match /bookings/{bookingId} {
      // Admins can read any booking. Users can read their own.
      allow read: if hasRole(['admin', 'superadmin']) || isOwner(resource.data.userId);
      // Authenticated users can create bookings.
      allow create: if request.auth != null;
      // Admins can update any booking. Users can update their own.
      allow update: if hasRole(['admin', 'superadmin']) || isOwner(resource.data.userId);
      // Only admins can delete bookings.
      allow delete: if hasRole(['admin', 'superadmin']);
    }

    // /dormitories/{dormId} & /halls/{hallId}
    match /{collection}/{docId} {
      // Anyone can read public listings.
      allow read: if collection in ['dormitories', 'halls'];
      // Only admins can manage (create, update, delete) the listings.
      allow write: if collection in ['dormitories', 'halls'] && hasRole(['admin', 'superadmin']);
    }

    // /notifications/{notificationId}
    match /notifications/{notificationId} {
      // Only admins can interact with notifications.
      allow read, write: if hasRole(['admin', 'superadmin']);
    }

    // /site_configuration/{configDoc}
    match /site_configuration/{configDoc} {
      // Anyone can read site configuration (e.g., for UI text, pricing).
      allow read: if true;
      // Only general admins or superadmins can change configuration.
      allow write: if isSuperOrGeneralAdmin();
    }
  }
}
