
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }

    function isKeyholder() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'keyholder';
    }
    
    function isStoreManager() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'store_manager';
    }

    function isCompanyRep() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'company_representative';
    }
    
    // --- Collection Rules ---

    // PUBLIC COLLECTIONS (Read-only for all)
    match /halls/{hallId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /dormitories/{dormId} {
      allow read: if true;
      allow write: if isAdmin();
    }
     match /blog/{postId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /site_configuration/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    match /employees/{employeeId} {
      allow read: if isAdmin() || isStoreManager();
      allow write: if isAdmin();
    }

    // USER DATA
    match /users/{userId} {
      allow read: if isSignedIn();
      allow update: if request.auth.uid == userId || isSuperAdmin();
      allow create, delete: if isSuperAdmin();
    }

    // BOOKINGS
    match /bookings/{bookingId} {
      // Allow anyone to create a dormitory booking.
      // Allow only authenticated company reps to create facility bookings.
      allow create: if (request.resource.data.bookingCategory == 'dormitory' || 
                       (request.resource.data.bookingCategory == 'facility' && isCompanyRep()));
                       
      // Allow the user who made the booking or an admin to read it.
      allow read: if (isSignedIn() && (request.auth.uid == resource.data.userId || isAdmin()));
      
      // Allow users to update their own bookings (e.g., upload agreement) and admins/keyholders to update status.
      allow update: if (isSignedIn() && (request.auth.uid == resource.data.userId || isAdmin() || isKeyholder()));
      
      // Only admins can delete bookings.
      allow delete: if isAdmin();
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
        allow read: if isSignedIn();
        allow write: if isAdmin(); // Notifications are created via server-side actions, which run with admin privileges.
    }
    
    // STORE ITEMS & TRANSACTIONS
    match /store_items/{itemId} {
      allow read: if isStoreManager() || isAdmin();
      allow write: if isStoreManager() || isAdmin();
    }
    
    match /store_transactions/{transactionId} {
      allow read: if isStoreManager() || isAdmin();
      allow create: if isStoreManager() || isAdmin(); // Transactions created server-side or by store manager
      allow update, delete: if isAdmin(); // Only admin can edit/delete history
    }

  }
}
