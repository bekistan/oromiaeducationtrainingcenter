
rules_version = '2';

// By default, deny all reads and writes
// service cloud.firestore {
//   match /databases/{database}/documents {
//     match /{document=**} {
//       allow read, write: if false;
//     }
//   }
// }

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin roles
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if request.auth.uid == userId; // Users can create their own doc
      allow update: if isOwner(userId) || isAdmin(); // Users can update their own data, admins can too
    }

    // Bookings collection
    match /bookings/{bookingId} {
      allow read: if isAdmin(); // Only admins can read full booking details
      allow list: if true; // Public can list for availability checks
      allow create: if true; // Anyone can create a booking request
      
      // Allow unauthenticated users to update ONLY for payment proof submission.
      // This is a specific and secure rule for the public payment flow.
      allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['paymentScreenshotUrl', 'paymentStatus']) && request.resource.data.paymentStatus == 'awaiting_verification';

      // Admins can update/delete
      allow update, delete: if isAdmin(); 
      
      // Company representatives can update their own agreements
      allow update: if request.auth != null && request.auth.uid == resource.data.userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['signedAgreementUrl', 'agreementStatus']);
    }

    // Dormitories and Halls can be read by anyone for public listings
    match /dormitories/{dormitoryId} {
      allow read: if true;
      allow list: if true;
      allow write: if isAdmin();
    }

    match /halls/{hallId} {
      allow read: if true;
      allow list: if true;
      allow write: if isAdmin();
    }
    
    // Blog can be read by anyone if it's published
    match /blog/{postId} {
        allow read: if resource.data.isPublished == true || isAdmin();
        allow list: if true; // Allow listing for all, client will filter published posts
        allow write: if isAdmin();
    }
    
    // Site configuration documents should be readable by public, writable only by admins
    match /site_configuration/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    // Notifications should only be readable by their intended recipient or an admin
    match /notifications/{notificationId} {
        allow read, write: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == resource.data.recipientRole || isAdmin());
    }

    // Store items and transactions should only be accessible by store managers and admins
    match /store_items/{itemId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['store_manager', 'admin', 'superadmin'];
    }
    
    match /store_transactions/{transactionId} {
       allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['store_manager', 'admin', 'superadmin'];
    }

    // Employees can be read by admins and store managers (for transaction assignment)
    match /employees/{employeeId} {
      allow read, write: if isAdmin();
    }
  }
}
