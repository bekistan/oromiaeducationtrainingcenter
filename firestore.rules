
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ==== HELPER FUNCTIONS ====
    function isLoggedIn() {
      return request.auth != null;
    }

    function isRole(role) {
      return isLoggedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isSuperAdmin() {
      return isRole('superadmin');
    }

    function isAdmin() {
      return isRole('admin');
    }

    function isKeyholder() {
      return isRole('keyholder');
    }

    function isCompanyRep() {
      return isRole('company_representative');
    }

    function isOwner(userId) {
      return isLoggedIn() && request.auth.uid == userId;
    }

    // ==== COLLECTION: users ====
    match /users/{userId} {
      allow read: if isLoggedIn() && (isOwner(userId) || isSuperAdmin() || isAdmin());
      allow list: if isLoggedIn() && (isSuperAdmin() || isAdmin());
      allow create: if isLoggedIn(); // Any authenticated user can create their own user document
      allow update: if isOwner(userId) || isSuperAdmin(); // User can update their own info, or superadmin can
      allow delete: if isSuperAdmin(); // Only superadmins can delete users
    }

    // ==== COLLECTION: dormitories & halls ====
    match /dormitories/{dormId} {
      allow read: if true; // Publicly readable
      allow write: if isSuperAdmin() || isAdmin();
    }

    match /halls/{hallId} {
      allow read: if true; // Publicly readable
      allow write: if isSuperAdmin() || isAdmin();
    }
    
    // ==== COLLECTION: blog ====
    match /blog/{postId} {
        allow get: if resource.data.isPublished == true || (isLoggedIn() && (isSuperAdmin() || isAdmin()));
        allow list: if true; // Allows querying, but will be filtered by rules on get
        allow write: if isLoggedIn() && (isSuperAdmin() || isAdmin());
    }

    // ==== COLLECTION: bookings ====
    match /bookings/{bookingId} {
      // READ:
      // - Admins/Superadmins can read any booking.
      // - Keyholders can read any dormitory booking.
      // - The user who created the booking can read it.
      // - A company rep can read bookings associated with their company.
      allow get: if isLoggedIn() && (
        isSuperAdmin() || isAdmin() ||
        (isKeyholder() && resource.data.bookingCategory == 'dormitory') ||
        (resource.data.userId != null && isOwner(resource.data.userId)) ||
        (resource.data.companyId != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == resource.data.companyId)
      );

      // LIST:
      // Admins, Superadmins, and Keyholders can list bookings to manage them.
      // Client-side queries should filter further (e.g., keyholders only see dorms).
      allow list: if isLoggedIn() && (isSuperAdmin() || isAdmin() || isKeyholder());
      
      // CREATE:
      // - Any authenticated user can create a booking request.
      // - We verify the userId matches the person making the request.
      allow create: if isLoggedIn() && request.auth.uid == request.resource.data.userId;

      // UPDATE:
      // - Admins/Superadmins can update any booking.
      // - Keyholders can update the keyStatus of dormitory bookings.
      // - The booking owner can update payment proof or signed agreement.
      allow update: if isLoggedIn() && (
        isSuperAdmin() || isAdmin() ||
        (isKeyholder() && request.resource.data.bookingCategory == 'dormitory' && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['keyStatus'])) ||
        (isOwner(resource.data.userId) && (
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['paymentScreenshotUrl', 'paymentStatus']) ||
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['signedAgreementUrl', 'agreementStatus', 'agreementSignedAt'])
        ))
      );
      
      // DELETE:
      // Only Superadmins or general Admins can delete bookings.
      allow delete: if isLoggedIn() && (isSuperAdmin() || isAdmin());
    }

    // ==== COLLECTION: notifications ====
    match /notifications/{notificationId} {
      // Only Admins and Superadmins can read/write notifications.
      allow read, write: if isLoggedIn() && (isAdmin() || isSuperAdmin());
    }
    
    // ==== COLLECTION: site_configuration (read-only for public) ====
    match /site_configuration/{docId} {
        allow get: if true; // Publicly readable for settings like bank details, site content, etc.
        allow list: if true;
        allow write: if isLoggedIn() && (isSuperAdmin() || isAdmin()); // Writable only by admins
    }
  }
}
