
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an admin or superadmin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }
    
    // Helper function to check if user is a specific role
    function isRole(role) {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Publicly readable collections
    match /blog/{postId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /dormitories/{dormId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /halls/{hallId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /site_configuration/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    // User-specific data
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if true; // Anyone can create a user account (register)
      allow update: if request.auth.uid == userId || isAdmin();
      allow delete: if isAdmin();
    }

    // Bookings can be created by authenticated users, but only managed by admins or the user who created it
    match /bookings/{bookingId} {
      allow read: if request.auth != null; // Allow any authenticated user to read (for checking their own booking)
      allow create: if request.auth != null;
      allow update, delete: if isAdmin() || get(/databases/$(database)/documents/bookings/$(bookingId)).data.userId == request.auth.uid;
    }
    
    // Notifications are write-only for the system (via server functions), and read-only for the recipient
    match /notifications/{notificationId} {
        allow read: if request.auth.uid == resource.data.recipientId || isRole(resource.data.recipientRole);
        allow create: if true; // Allow server-side functions to create notifications
        allow update, delete: if isRole(resource.data.recipientRole);
    }
    
    // Store items can be managed by store managers and admins
    match /store_items/{itemId} {
      allow read, write: if isRole('store_manager') || isAdmin();
    }
    
    match /store_transactions/{transactionId} {
       allow read, write: if isRole('store_manager') || isAdmin();
    }
    
    // Employees can be managed by HR Directors and Admins
    match /employees/{employeeId} {
        allow read, write: if isRole('hr_director') || isAdmin();
    }
    
    // Attendance can be recorded and read by HR Directors and Admins
    match /attendance/{recordId} {
        allow read, write: if isRole('hr_director') || isAdmin();
    }

    // By default, deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
