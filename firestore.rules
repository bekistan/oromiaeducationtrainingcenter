
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check user roles
    function isUserInRole(roles) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // -- PUBLICLY READABLE DATA --
    
    // Blog Posts: Anyone can read published posts. Admins manage.
    match /blog/{postId} {
      allow read: if resource.data.isPublished == true || isUserInRole(['admin', 'superadmin']);
      allow create, update, delete: if request.auth != null && isUserInRole(['admin', 'superadmin']);
    }

    // Dormitories: Publicly readable for listings. Admins manage.
    match /dormitories/{dormId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && isUserInRole(['admin', 'superadmin']);
    }

    // Halls: Publicly readable for listings. Admins manage.
    match /halls/{hallId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && isUserInRole(['admin', 'superadmin']);
    }

    // Bookings: Public read is necessary for availability checks by anonymous users.
    // Write operations are restricted.
    match /bookings/{bookingId} {
      allow read: if true; // Allow public read for availability checks
      allow create: if request.auth != null; // Any authenticated user can create
      allow update: if request.auth != null && (
                      isOwner(resource.data.userId) || 
                      isUserInRole(['admin', 'superadmin', 'keyholder'])
                    );
      allow delete: if request.auth != null && isUserInRole(['admin', 'superadmin']);
    }

    // -- SECURED DATA --

    // User Profiles: Users can only read/write their own data. Admins have wider access.
    match /users/{userId} {
      allow read: if isOwner(userId) || isUserInRole(['admin', 'superadmin']);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId) || isUserInRole(['admin', 'superadmin']);
      allow delete: if isUserInRole(['superadmin']); // Only superadmin can delete user records
    }
    
    // Site Configuration: Only specific admins should access these.
    match /site_configuration/{docId} {
        allow read: if true; // Allow public read for settings like bank details, site content, etc.
        allow write: if request.auth != null && isUserInRole(['admin', 'superadmin']);
    }
    
    // Notifications: Only intended recipients or admins can read.
    match /notifications/{notificationId} {
      allow read, update: if request.auth != null && (
                      resource.data.recipientId == request.auth.uid ||
                      resource.data.recipientRole == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role ||
                      isUserInRole(['admin', 'superadmin'])
                    );
      allow create: if true; // Allow server-side actions to create notifications
    }
    
    // Store and Employee data: Only store managers and admins
    match /store_items/{itemId} {
      allow read, write: if request.auth != null && isUserInRole(['store_manager', 'admin', 'superadmin']);
    }
    
    match /store_transactions/{txId} {
       allow read, write: if request.auth != null && isUserInRole(['store_manager', 'admin', 'superadmin']);
    }
    
    match /employees/{employeeId} {
       allow read, write: if request.auth != null && isUserInRole(['store_manager', 'admin', 'superadmin']);
    }
  }
}
