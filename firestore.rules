
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSuperAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }

    function isKeyholder() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'keyholder';
    }

    function isStoreManager() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'store_manager';
    }

    function isCompanyRep() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'company_representative';
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isUploadingPaymentProof() {
        // Allow update if only paymentScreenshotUrl and paymentStatus are being changed.
        let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
        // Allow changing only these two fields.
        let allowedKeys = ['paymentScreenshotUrl', 'paymentStatus'];
        // Check if the user is only changing the allowed keys.
        return changedKeys.hasAll(allowedKeys) && changedKeys.size() == 2 &&
               request.resource.data.paymentStatus == 'awaiting_verification';
    }


    // Bookings
    match /bookings/{bookingId} {
      allow read: if isAdmin() || isKeyholder() || (isCompanyRep() && resource.data.userId == request.auth.uid);
      allow create: if true; // Anyone can create a booking request
      // Allow updates by admins, owners, or anyone submitting a payment proof.
      allow update: if isAdmin() || 
                       (isCompanyRep() && resource.data.userId == request.auth.uid) ||
                       isUploadingPaymentProof();
      allow delete: if isAdmin();
      allow list: if true;
    }

    // Users
    match /users/{userId} {
      allow read: if isAdmin() || isOwner(userId);
      allow create: if request.resource.data.role == 'company_representative'; // Public company registration
      allow update: if isSuperAdmin() || isOwner(userId);
      allow delete: if isSuperAdmin();
    }
    
    // Site configuration documents
    match /site_configuration/{docId} {
        allow read: if true; // Publicly readable
        allow write: if isAdmin(); // Only admins can change settings
    }

    // Blog posts
    match /blog/{postId} {
        // Public can read published posts
        allow read: if resource.data.isPublished == true;
        // Admins can read, write, create, delete all posts
        allow write, create, delete: if isAdmin();
        // Admins can also read unpublished posts
        allow get: if isAdmin();
    }
    
    // Notifications
    match /notifications/{notificationId} {
        allow read, write: if isAdmin() || isKeyholder() || isStoreManager();
        allow create: if true; // Allow server-side actions to create notifications
    }

    // Employees
    match /employees/{employeeId} {
        allow read: if isAdmin() || isStoreManager();
        allow write, create, delete: if isAdmin();
    }
    
    // Store Items & Transactions
    match /store_items/{itemId} {
        allow read: if isStoreManager() || isAdmin();
        allow write, create, delete: if isStoreManager();
    }
    
    match /store_transactions/{transactionId} {
        allow read, create: if isStoreManager();
        allow write, delete: if isSuperAdmin(); // Only superadmins can alter history
    }
  }
}
