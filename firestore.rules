
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSuperAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isKeyholder() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'keyholder';
    }
    
    function isCompanyRep() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'company_representative';
    }

    // Allow anyone to read these public collections
    match /dormitories/{dormId} {
      allow read: if true;
      allow write: if isSuperAdmin() || isAdmin();
    }
    match /halls/{hallId} {
      allow read: if true;
      allow write: if isSuperAdmin() || (isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.buildingAssignment == null);
    }
    match /blog/{postId} {
        allow read: if resource.data.isPublished == true || isSuperAdmin() || isAdmin();
        allow write: if isSuperAdmin() || isAdmin();
    }
    match /site_configuration/{docId} {
        allow read: if true;
        allow write: if isSuperAdmin() || (isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.buildingAssignment == null);
    }

    // Bookings
    match /bookings/{bookingId} {
      // Allow anyone to create a dormitory booking, and any logged-in user to create for themselves
      allow create: if request.resource.data.bookingCategory == 'dormitory'
                    || (request.auth != null && request.auth.uid == request.resource.data.userId);
      
      // Allow authenticated company reps to create facility bookings
      allow create: if request.resource.data.bookingCategory == 'facility'
                    && isCompanyRep()
                    && request.auth.uid == request.resource.data.userId;

      // Admins can manage all bookings
      allow read, update, delete: if isSuperAdmin() || isAdmin();

      // Company reps can read their own bookings and update them
      allow read, update: if isCompanyRep()
                      && request.auth.uid == resource.data.userId
                      && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == resource.data.companyId;
    }
    
    // Allow company reps to LIST bookings that match their companyId
    // This is the key fix for the dashboard query
    match /bookings/{bookingId} {
        allow list: if isCompanyRep()
                    && request.query.resource.data.companyId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId;
    }

    // Users
    match /users/{userId} {
      // Allow a user to read their own document
      allow get: if request.auth.uid == userId;

      // Allow a user to update their own non-critical info
      allow update: if request.auth.uid == userId && !(request.resource.data.role != resource.data.role);

      // Anyone can create a company_representative user document for themselves during signup
      allow create: if request.auth.uid == userId && 
                      (request.resource.data.role == 'company_representative' || request.resource.data.role == 'individual');
      
      // Superadmins can do anything to user documents
      allow read, write: if isSuperAdmin();
      
      // General Admins can read user documents (for company approval page) but not edit roles
      allow read: if isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.buildingAssignment == null;
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
