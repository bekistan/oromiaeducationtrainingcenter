
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }

    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    function isKeyholder() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'keyholder';
    }
    
    function isCompanyRep() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'company_representative';
    }

    // Users collection
    match /users/{userId} {
      allow create: if request.auth.uid == userId;
      allow get: if request.auth.uid == userId || isSuperAdmin();
      allow update: if request.auth.uid == userId || isSuperAdmin();
      allow delete: if isSuperAdmin();
      allow list: if isSuperAdmin();
    }

    // Bookings collection
    match /bookings/{bookingId} {
      allow create: if true;
      allow get: if isAdmin() || (isCompanyRep() && resource.data.companyId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId);
      allow list: if isAdmin();
      allow update, delete: if isAdmin();
    }
    
    // Blog collection
    match /blog/{postId} {
        // Admins can do anything to any blog post
        allow write: if isAdmin();
        
        // Anyone can read a post if it's published. Admins can read any post.
        allow get: if resource.data.isPublished == true || isAdmin();
        
        // Anyone can query/list the blog collection.
        // Firestore's query rules ensure that a user can only receive documents
        // from a list query that they also have GET permission for.
        // This means public users MUST include `where("isPublished", "==", true)`
        // in their client-side query, otherwise the query will be rejected by Firestore.
        allow list: if true;
    }
    
    // Publicly readable collections
    match /dormitories/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    match /halls/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    // Configuration collections
    match /site_configuration/{docId} {
      allow get: if true;
      allow write: if isAdmin();
    }

    // Notifications collection (Admin only)
    match /notifications/{notificationId} {
      allow read, write, delete, list: if isAdmin();
    }
  }
}
