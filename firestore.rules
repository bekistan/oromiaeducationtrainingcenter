
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAdmin() {
      // Use short-circuiting to prevent get() on null auth
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }

    function isSuperAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    // USERS
    match /users/{userId} {
      allow create: if isAuth() && request.auth.uid == userId;
      allow read, update: if isOwner(userId) || isAdmin();
      allow delete: if isSuperAdmin();
      allow list: if isAdmin();
    }
    
    // BLOG
    match /blog/{postId} {
      // Combined read rule for 'get' and 'list' operations.
      // Public users can query if they filter by isPublished == true.
      // Admins can read everything.
      allow read: if resource.data.isPublished == true || isAdmin();
      // Only admins can write.
      allow write: if isAdmin();
    }
    
    // FACILITIES
    match /(dormitories|halls)/{itemId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // SITE CONFIGURATION
    match /site_configuration/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // BOOKINGS
    match /bookings/{bookingId} {
      allow create: if (isAuth() && request.resource.data.userId == request.auth.uid) || (request.resource.data.userId == null);
      allow read: if isAdmin() || (isAuth() && resource.data.userId == request.auth.uid);
      allow update, delete: if isAdmin();
    }
    
    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read, write: if isAdmin();
    }
  }
}
      