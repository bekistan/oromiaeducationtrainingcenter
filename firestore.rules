
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user is an admin or superadmin
    function isAdmin() {
      return request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }

    // Helper function to check if a user is a keyholder
    function isKeyholder() {
      return request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'keyholder';
    }

    // Helper function to check if a user is a store manager
    function isStoreManager() {
      return request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'store_manager';
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if request.auth.uid != null; // Logged-in users can read user data
      allow create: if request.auth.uid == userId; // Users can create their own document
      allow update: if isAdmin() || isOwner(userId); // Admins or the user themselves can update
      allow delete: if isAdmin(); // Only admins can delete users
    }

    // Dormitories collection rules
    match /dormitories/{dormId} {
      allow read: if true; // Public can read dormitory listings
      allow list: if true; // Allow public to query the dormitory list
      allow create, update, delete: if isAdmin(); // Only admins can manage dormitories
    }

    // Halls collection rules
    match /halls/{hallId} {
      allow read: if true; // Public can read hall listings
      allow list: if true; // Allow public to query the hall list to check availability
      allow create, update, delete: if isAdmin(); // Only admins can manage halls
    }

    // Bookings collection rules
    match /bookings/{bookingId} {
      allow read: if isAdmin() || isOwner(get(/databases/$(database)/documents/bookings/$(bookingId)).data.userId);
      allow create: if request.auth.uid != null; // Logged-in users can create bookings
      allow list: if true; // Allow public listing for availability checks
      allow update: if isAdmin() || 
                      // Allow anyone to submit a payment proof if not already paid/failed
                      (request.resource.data.paymentScreenshotUrl != resource.data.paymentScreenshotUrl && 
                       request.resource.data.paymentStatus == 'awaiting_verification' &&
                       resource.data.paymentStatus != 'paid' &&
                       resource.data.paymentStatus != 'failed');
      allow delete: if isAdmin();
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid != null; // Any authenticated user can read/update their notifications
      allow create: if true; // Allow server-side actions to create notifications
    }
    
    // Site Configuration rules
    match /site_configuration/{docId} {
        allow read: if true; // Allow public read for settings like bank details, site content, etc.
        allow write: if isAdmin(); // Only admins can change site-wide settings
    }
    
    // Blog collection rules
    match /blog/{postId} {
        allow read: if true; // Public can read blog posts
        allow list: if true; // Public can list blog posts
        allow create, update, delete: if isAdmin(); // Only admins can manage blog posts
    }

    // Employee collection rules
    match /employees/{employeeId} {
      allow read: if isAdmin() || isStoreManager(); // Admins and Store Managers can see employee list
      allow list: if isAdmin() || isStoreManager();
      allow create, update, delete: if isAdmin(); // Only admins can manage employees
    }
    
    // Store Management rules
    match /store_items/{itemId} {
      allow read, list: if isStoreManager() || isAdmin();
      allow create, update, delete: if isStoreManager() || isAdmin();
    }
    
    match /store_transactions/{transactionId} {
      allow read, list: if isStoreManager() || isAdmin();
      allow create: if isStoreManager() || isAdmin();
    }
  }
}
