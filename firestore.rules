rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSuperAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isKeyholder() {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'keyholder';
    }
    
    function isCompanyRep() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'company_representative';
    }

    function isStoreManager() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'store_manager';
    }

    // --- PUBLIC & SEMI-PUBLIC COLLECTIONS ---
    match /dormitories/{dormId} {
      allow read, list: if true;
      allow write: if isSuperAdmin() || isAdmin();
    }
    match /halls/{hallId} {
      allow read, list: if true;
      allow write: if isSuperAdmin() || (isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.buildingAssignment == null);
    }
    match /blog/{postId} {
        allow read: if resource.data.isPublished == true || isSuperAdmin() || isAdmin();
        allow list: if true;
        allow write: if isSuperAdmin() || isAdmin();
    }
    match /site_configuration/{docId} {
        allow read: if true;
        allow write: if isSuperAdmin() || (isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.buildingAssignment == null);
    }
     match /store_items/{itemId} {
      allow read: if isSuperAdmin() || isAdmin() || isKeyholder() || isStoreManager();
      allow write: if isSuperAdmin() || isStoreManager();
    }
    match /store_transactions/{transactionId} {
      allow read: if isSuperAdmin() || isAdmin() || isStoreManager();
      allow write: if isSuperAdmin() || isStoreManager();
    }
     match /employees/{employeeId} {
      allow read: if isSuperAdmin() || isAdmin() || isStoreManager();
      allow write: if isSuperAdmin() || (isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.buildingAssignment == null);
    }

    // --- BOOKINGS ---
    match /bookings/{bookingId} {
      // Allow public queries for availability checks. This is safe as long as client code doesn't expose sensitive data.
      allow list, read: if true;
      
      // Allow anyone to create a dormitory booking, and authenticated company reps to create facility bookings.
      allow create: if (request.resource.data.bookingCategory == 'dormitory') || 
                    (isCompanyRep() && request.auth.uid == request.resource.data.userId);

      // Admins and SuperAdmins can manage all bookings.
      allow update, delete: if isSuperAdmin() || isAdmin();
      
      // Company reps can update their own bookings (e.g., uploading an agreement).
      allow update: if isCompanyRep()
                         && request.auth.uid == resource.data.userId
                         && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == resource.data.companyId;

      // Keyholders can update keyStatus on dormitory bookings.
      allow update: if isKeyholder() && resource.data.bookingCategory == 'dormitory' && request.resource.data.keys().hasOnly(['keyStatus']);
    }

    // --- USERS ---
    match /users/{userId} {
      // Allow a user to read their own document.
      allow get: if request.auth.uid == userId;

      // Allow a user to update their own non-critical info.
      allow update: if request.auth.uid == userId && !(request.resource.data.role != resource.data.role);

      // Anyone can create a user document for themselves during signup.
      allow create: if request.auth.uid == userId;
      
      // Superadmins can do anything to user documents.
      allow read, write: if isSuperAdmin();
      
      // General Admins can read user documents (for company approval page) but not edit roles.
      allow read: if isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.buildingAssignment == null;
    }
    
    // --- NOTIFICATIONS ---
    match /notifications/{notificationId} {
      // Users can read notifications intended for them (by role or specific ID).
      allow read: if request.auth != null &&
                    (resource.data.recipientRole == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role ||
                     resource.data.recipientId == request.auth.uid);
      
      // Allow logged-in users to update the 'isRead' status on their own notifications.
      allow update: if request.auth != null &&
                      (resource.data.recipientRole == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role ||
                       resource.data.recipientId == request.auth.uid) &&
                       request.resource.data.keys().hasOnly(['isRead']);

      // Only backend processes should create notifications.
      allow create: if false; 
    }
  }
}